classdef MicroscopeActionControllerResponder < YMicroscope.MicroscopeAction
    % Controller Responder
    % respond controller events
    % is used alone or embedded in other actions to process the events
    % generated by the microscope controller (UI respondance not included)
    
    
    properties (Access = protected)
        controllerlisteners
    end
    
    methods
        % constructor
        function obj=MicroscopeActionControllerResponder...
                (label,microscope,image_axes,controller)
            obj@YMicroscope.MicroscopeAction(label,microscope,image_axes);
            obj.setControllerListeners(controller);
        end
        
        % set up listners for the events
        % use it in the constructor of the subclass if it doesn't call the
        % constructer of MicroscopeActionControllerResponder
        function setControllerListeners(obj,controller)
            % create a listener for each event type of the controller
            controllerevents=events(controller);
            obj.controllerlisteners=repmat(event.listener.empty(),...
                length(controllerevents));
            for i=1:length(controllerevents)
                % set call back for each listner
                obj.controllerlisteners(i)=addlistener(controller,...
                    controllerevents{i},...
                    @(src,eventdata)obj.respondEvent(src,eventdata));
            end
        end
        
        % delete listenrs after use of them
        % dont forget to add them to the destructer of its subclass
        function deleteControllerListeners(obj)
            delete(obj.controllerlisteners);
        end
        
        % destructor
        function delete(obj)
            obj.deleteControllerListeners;
            delete@YMicroscope.MicroscopeAction(obj);
        end
        
        % respond to event
        function respondEvent(obj,src,eventdata)
            name=eventdata.EventName;
            microscope=obj.microscope_handle;
            switch name
                case 'MoveXYStage'
                    isadjustedtolooprate=eventdata.isadjustedtolooprate;
                    if ~isadjustedtolooprate
                        scale=1;
                    else
                        scale=obj.eventloop.getRate();
                    end
                    vs = [eventdata.xspeed*scale, eventdata.yspeed*scale];
                    microscope.xystage.setSpeed(vs);
                case 'MoveZStage'
                    isadjustedtolooprate=eventdata.isadjustedtolooprate;
                    if ~isadjustedtolooprate
                        scale=1;
                    else
                        scale=obj.eventloop.getRate();
                    end
                    microscope.zstage.setZoffset...
                        (microscope.zstage.zoffset+eventdata.zspeed*scale);
                case 'MoveStop'
                    microscope.xystage.setSpeed([0,0]);
                case 'ToggleLightSelection'
                    currentindex=find(strcmp(microscope.illumination,...
                        microscope.illumination_options));
                    totalnum=length(microscope.illumination_options);
                    newilluminationstr=microscope.illumination_options...
                        {mod(currentindex-1+1,totalnum)+1};
                    microscope.setIllumination(newilluminationstr);
                case 'ToggleLight'
                    if microscope.isLightOn == true
                        microscope.setLight('off');
                    else
                        microscope.setLight('always on');
                    end
                case 'Capture'
                    captureaction=MicroscopeActionCapture('livecapture',...
                        microscope,obj.image_axes);
                    captureaction.run;
                    delete(captureaction);
                case 'ZoomIn'
                    camera=microscope.camera;
                    currentindex=find(strcmp(camera.roi,...
                        camera.roi_options));
                    totalnum=length(camera.roi_options);
                    newindex=currentindex;
                    if currentindex<totalnum
                        newindex=newindex+1;
                        newroistr=camera.roi_options{newindex};
                        camera.setRoi(newroistr);
                    end
                case 'ZoomOut'
                    camera=microscope.camera;
                    currentindex=find(strcmp(camera.roi,...
                        camera.roi_options));
                    newindex=currentindex;
                    if currentindex>1
                        newindex=newindex-1;
                        newroistr=camera.roi_options{newindex};
                        camera.setRoi(newroistr);
                    end
                otherwise
                    throw(MException('Action:InvalidEvent',...
                        'unsupported event data type'));
            end
        end
        
        % get event display for ui
        function dispstr=getEventDisplay(obj,eventstr)
            getEventDisplay@YMicroscope.MicroscopeAction(obj);
        end
    end

end

